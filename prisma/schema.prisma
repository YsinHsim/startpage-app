// prisma/schema.prisma

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Your Neon database connection string
}

// NextAuth.js Models (required by the adapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) // Use cuid() for NextAuth.js compatibility
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   // This will store the profile picture URL from Google
  currentWallpaperUrl String? // User's currently selected wallpaper URL (can be a direct URL or reference a Wallpaper.url)
  selectedSearchEngineId String? // ID of the user's selected search engine

  accounts      Account[]
  sessions      Session[]
  searchEngines SearchEngine[] // User's custom search engines
  linkGroups    LinkGroup[]    // User's custom link groups
  wallpapers    Wallpaper[]    // New: User's collection of saved wallpapers

  @@map("users") // Maps this model to the 'users' table in your database
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Your Custom Models (from your proposed schema)
model SearchEngine {
  id          String    @id @default(cuid())
  userId      String?   // Nullable for global/default engines (e.g., Google, DuckDuckGo)
  name        String
  baseUrl     String    @db.Text // Use @db.Text for potentially long URLs
  isDefault   Boolean   @default(false) // True if it's a pre-defined default engine
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("search_engines") // Maps this model to the 'search_engines' table
}

model LinkGroup {
  id           String    @id @default(cuid())
  userId       String
  name         String
  isDefault    Boolean   @default(false) // True if it's a pre-defined default group
  displayOrder Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  links        Link[]

  @@unique([userId, name]) // Ensure group names are unique per user
  @@map("link_groups") // Maps this model to the 'link_groups' table
}

model Link {
  id           String    @id @default(cuid())
  groupId      String
  name         String
  url          String    @db.Text // Use @db.Text for potentially long URLs
  iconUrl      String?   @db.Text // Optional: URL to an icon for the link
  displayOrder Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  group        LinkGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("links") // Maps this model to the 'links' table
}

// New: Model for storing a collection of wallpapers
model Wallpaper {
  id           String    @id @default(cuid())
  userId       String    // Foreign key to the User who saved this wallpaper
  url          String    @db.Text // The URL of the wallpaper image
  name         String?   // Optional: A user-defined name for the wallpaper
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallpapers") // Maps this model to the 'wallpapers' table
}
